// @ts-nocheck/* eslint-disable */'use client';import { motion } from 'framer-motion';import { useForm } from 'react-hook-form';import { useState } from 'react';export default function ContactPage() {  const [isSubmitting, setIsSubmitting] = useState(false);  const [submissionStatus, setSubmissionStatus] = useState(null);    const {    register,    handleSubmit,    formState: { errors },    reset  } = useForm();  const onSubmit = async (data) => {    setIsSubmitting(true);    setSubmissionStatus(null);        try {      const response = await fetch('/api/contact', {        method: 'POST',        headers: { 'Content-Type': 'application/json' },        body: JSON.stringify(data)      });      if (!response.ok) throw new Error('Submission failed');            setSubmissionStatus('success');      reset();    } catch (error) {      setSubmissionStatus('error');    } finally {      setIsSubmitting(false);    }  };  return (    <motion.div      initial={{ opacity: 0, y: 20 }}      animate={{ opacity: 1, y: 0 }}      transition={{ duration: 0.5 }}      className="min-h-screen py-12 px-4 sm:px-6 lg:px-8"    >      <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg p-8">        <motion.h1          initial={{ opacity: 0 }}          animate={{ opacity: 1 }}          className="text-3xl font-bold text-amber-600 mb-8 text-center"        >          Get in Touch        </motion.h1>        {submissionStatus === 'success' && (          <motion.div            initial={{ opacity: 0, y: -20 }}            animate={{ opacity: 1, y: 0 }}            className="mb-6 p-4 bg-green-100 text-green-700 rounded-lg"            role="alert"          >            Message sent successfully! We'll respond within 24 hours.          </motion.div>        )}        {submissionStatus === 'error' && (          <motion.div            initial={{ opacity: 0, y: -20 }}            animate={{ opacity: 1, y: 0 }}            className="mb-6 p-4 bg-red-100 text-red-700 rounded-lg"            role="alert"          >            Failed to send message. Please try again later.          </motion.div>        )}        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6" noValidate>          <motion.div            initial={{ opacity: 0, x: -20 }}            animate={{ opacity: 1, x: 0 }}            transition={{ delay: 0.2 }}          >            <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="name">              Name            </label>            <input              id="name"              {...register('name', { required: 'Name is required' })}              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 transition-colors ${                errors.name ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-amber-500'              }`}              aria-invalid={errors.name ? 'true' : 'false'}              aria-describedby={errors.name && 'name-error'}            />            {errors.name && (              <p className="text-red-500 text-sm mt-1" id="name-error">                {errors.name.message}              </p>            )}          </motion.div>          <motion.div            initial={{ opacity: 0, x: -20 }}            animate={{ opacity: 1, x: 0 }}            transition={{ delay: 0.3 }}          >            <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="email">              Email            </label>            <input              id="email"              type="email"              {...register('email', {                required: 'Email is required',                pattern: {                  value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,                  message: 'Invalid email address'                }              })}              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 transition-colors ${                errors.email ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-amber-500'              }`}              aria-invalid={errors.email ? 'true' : 'false'}              aria-describedby={errors.email && 'email-error'}            />            {errors.email && (              <p className="text-red-500 text-sm mt-1" id="email-error">                {errors.email.message}              </p>            )}          </motion.div>          <motion.div            initial={{ opacity: 0, x: -20 }}            animate={{ opacity: 1, x: 0 }}            transition={{ delay: 0.4 }}          >            <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="message">              Message            </label>            <textarea              id="message"              {...register('message', {                required: 'Message is required',                minLength: {                  value: 10,                  message: 'Message must be at least 10 characters'                }              })}              rows="4"              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 transition-colors ${                errors.message ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-amber-500'              }`}              aria-invalid={errors.message ? 'true' : 'false'}              aria-describedby={errors.message && 'message-error'}            />            {errors.message && (              <p className="text-red-500 text-sm mt-1" id="message-error">                {errors.message.message}              </p>            )}          </motion.div>          <motion.button            whileHover={{ scale: 1.05 }}            whileTap={{ scale: 0.95 }}            type="submit"            disabled={isSubmitting}            className="w-full bg-amber-600 text-white py-2 px-4 rounded-lg hover:bg-amber-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"          >            {isSubmitting ? 'Sending...' : 'Send Message'}          </motion.button>        </form>      </div>    </motion.div>  );}